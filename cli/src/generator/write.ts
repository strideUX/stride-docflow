import fsp from "node:fs/promises";
import path from "node:path";
import pc from "picocolors";
import type { Env } from "../core/env.js";
import type { ProjectSpec, SeedItem } from "../core/types.js";
import { buildTokens, copyAndRenderDir, resolveAssetsSubdir } from "./renderer.js";

export interface WriteProjectArgs {
  env: Env;
  spec: ProjectSpec;
  items: SeedItem[];
  deps?: Array<[string, string]>;
}

export interface WriteResult {
  dstRoot: string;
  wrote: string[];
}

export async function writeProject({ env, spec }: WriteProjectArgs): Promise<WriteResult> {
  const dstRoot = path.join(env.DOCFLOW_ROOT, spec.meta.projectSlug);
  await fsp.mkdir(dstRoot, { recursive: true });

  const tokens = buildTokens({
    projectName: spec.meta.projectName,
    projectSlug: spec.meta.projectSlug,
    owner: spec.meta.owner,
    platform: spec.meta.platform,
    packName: spec.meta.packName,
    packVersion: spec.meta.packVersion,
    iterNum: spec.iteration.iterNum,
  });

  const wrote: string[] = [];

  // Copy runtime templates (docflow + .cursor)
  const templatesRoot = resolveAssetsSubdir("templates-runtime");
  const written = await copyAndRenderDir(templatesRoot, dstRoot, tokens);
  wrote.push(...written);

  // Write pack stack.md → docflow/project/stack.md
  const stackSrc = path.join(resolveAssetsSubdir("packs"), spec.meta.packName, "stack.md");
  try {
    const raw = await fsp.readFile(stackSrc, "utf8");
    const rendered = raw.replace(/\{\{PACK_VERSION\}\}/g, spec.meta.packVersion);
    const dst = path.join(dstRoot, "docflow/project/stack.md");
    await fsp.mkdir(path.dirname(dst), { recursive: true });
    await fsp.writeFile(dst, rendered, { mode: 0o644 });
    wrote.push(dst);
  } catch {
    // optional
  }

  // Write env example (pack/auth specific – simplified by platform)
  const envFile = spec.meta.platform === "mobile" ? "env.example.mobile" : ".env.example";
  const envPath = path.join(dstRoot, envFile);
  const envContent = [
    `# Generated by Docflow for ${spec.meta.packName}@${spec.meta.packVersion}`,
    `# Copy to ${spec.meta.platform === "mobile" ? "env" : ".env.local"} and fill in values`,
    "",
    "# Example",
    "APP_BASE_URL=",
    "LOG_LEVEL=info",
  ].join("\n");
  await fsp.writeFile(envPath, envContent, { mode: 0o644 });
  wrote.push(envPath);

  // eslint-disable-next-line no-console
  console.log(pc.green(`Wrote ${wrote.length} files under ${dstRoot}`));
  return { dstRoot, wrote };
}

