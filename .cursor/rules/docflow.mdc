# Docflow CLI - Conversational AI Documentation Generator

## Project Context

This is the Docflow CLI tool for generating AI-powered project documentation. The project is evolving from template-based generation to conversational AI-driven documentation creation.

## Current State

- **Implemented**: Template-based documentation generation with AI content filling
- **Status**: Planning conversational AI enhancement (v2.0)
- **Documentation**: Complete project specs in `/docs/`

## Key Documentation

### Project Understanding
- Read `/docs/project/specs.md` for high-level vision
- Read `/docs/project/architecture.md` for technical design
- Read `/docs/project/design.md` for UX patterns

### Current Development
- Read `/docs/releases/current/index.md` for release plan
- Read `/docs/releases/current/features.md` for detailed features
- Read `/docs/active/focus.md` for current priorities
- Read `/docs/notes/2025-08-15.md` for major decisions and session context
- Follow `/docs/project/workflows.md` for WrapSession protocol when capturing decisions

### Documentation Philosophy
- Read the "Documentation Philosophy & Structure" section in `README.md`
- Follow the information hierarchy: specs → features → implementation → docs updated

## Architecture Overview

```
cli/src/
├── commands/          # CLI command handlers
├── prompts/           # User interaction (to be enhanced with conversation)
├── generators/        # AI content generation (to be enhanced)
├── templates/         # Template system (to be replaced with purposes)
├── ui/                # Terminal UI components
└── index.ts           # Main CLI entry point
```

## Current Enhancement Approach

**Goal**: Transform from template-based to conversational AI documentation generation

**Strategy**: Gradual enhancement approach
1. Add conversational mode alongside existing templates
2. Test and refine conversational approach
3. Replace template system with conversational as default

## Key Implementation Areas

### Major Modifications Needed
- `src/prompts/project.ts` - Replace form prompts with conversation engine
- `src/generators/ai-generator.ts` - Enhance from section-filling to purpose-driven
- `src/generators/docs.ts` - Replace template processing with conversational workflow

### New Components Required
- `src/conversation/` - Conversation engine and phase management
- `src/context/` - Context management and persistence
- `src/purposes/` - Document purpose framework

## Development Guidelines

### Code Standards
- TypeScript with strict settings
- Functional, composable architecture
- Error handling with graceful fallbacks
- Beautiful CLI experience with Clack
- Comprehensive JSDoc comments

### AI Integration
- Support OpenAI, Anthropic, and local models
- Context-aware prompting with project specifics
- Efficient API usage with caching and retries
- Fallback strategies for API failures

### User Experience
- Natural conversation flows
- Clear progress indicators
- Graceful error handling and recovery
- Iterative refinement capabilities

## Testing Strategy

- Test with diverse project types and sizes
- Validate AI conversation quality and context retention
- Ensure backward compatibility during transition
- Performance testing for conversation and generation

## Implementation Priority

**Phase 1: Conversation Engine (Weeks 1-3)**
- Build conversation framework with context management
- Implement project discovery workflow
- Add user validation and refinement

**Phase 2: Document Purpose System (Weeks 4-5)**
- Replace templates with purpose-driven generation
- Add stakeholder-specific content tailoring
- Ensure cross-document consistency

**Phase 3: Integration & Polish (Weeks 6-8)**
- Connect conversation to documentation generation
- Add iterative refinement capabilities
- Optimize performance and user experience

## Success Criteria

- 90%+ user satisfaction vs template approach
- Complete documentation generation under 10 minutes
- Maintains context across 50+ conversation turns
- Documentation requires minimal manual editing

---

## Session Notes & Decision Records

For significant changes, scope modifications, or architectural decisions, add timestamped entries to the appropriate daily file in `/docs/notes/`:

**Entry Types:**
- `DECISION RECORD`: Major architectural or implementation decisions
- `SCOPE CHANGE`: Modifications to project scope or timeline  
- `NOTE`: Important insights or design discoveries
- `CHANGE`: Structural or process changes

**Format:** Follow WrapSession Protocol in `/docs/project/workflows.md`

**Quick Reference:**
```
## HH:MM - ENTRY TYPE: Brief Description
**Type:** Category
**Impact:** High/Medium/Low - Area affected
**Rationale:** Why this change/decision was made
**Affects:** What systems/processes this impacts
```

When working on this project, always consider the conversational enhancement goals and refer to the comprehensive documentation in `/docs/` for context and requirements.