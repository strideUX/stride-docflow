---
alwaysApply: true
version: "2.1"
---
# Docflow

<!-- STATIC -->
## Project Documentation System

<!-- STATIC -->
This project uses a release-based doc-driven approach with structured task management:

- **docs/project/** - Static project context (specs, architecture, design, stack)
- **docs/releases/current/** - Active release work (index.md is your PRIMARY REFERENCE)
- **docs/backlog/** - Future planning and ideas  
- **docs/active/** - Session management and current focus

<!-- STATIC -->
## Getting Started Protocol

<!-- STATIC -->
**ALWAYS START HERE:** Read `docs/releases/current/index.md` for current state and priorities.

1. Check current focus and active items
2. Review session handoff in `docs/active/session.md`
3. Reference project context from `docs/project/` as needed
4. Update progress in real-time as work proceeds

<!-- STATIC -->
## File Navigation Priorities

1. **docs/releases/current/index.md** - Primary reference, current state
2. **docs/active/focus.md** - What's being worked on right now
3. **docs/active/session.md** - Session handoff and notes
4. **docs/releases/current/[features|enhancements|bugs].md** - Detailed item specs
5. **docs/project/** - Static project context when needed

<!-- STATIC -->
## Item Management Workflow

<!-- STATIC -->
### Adding New Items Checklist
- [ ] Add to appropriate backlog file first (features/enhancements/bugs)
- [ ] Assign complexity (XS/S/M/L/XL) and priority (High/Medium/Low)
- [ ] Document dependencies/blockers if any
- [ ] Only move to current release when fully defined and ready
- [ ] Update releases/current/index.md router when moving to active

<!-- STATIC -->
### Starting Work Checklist  
- [ ] Item exists in current release with status "Ready"
- [ ] Move item status to "In Progress" in index.md
- [ ] Update active/focus.md with current item details
- [ ] Check dependencies are complete
- [ ] Begin implementation

<!-- STATIC -->
### Real-time Progress Updates
- [ ] Update item status in releases/current/index.md as progress is made
- [ ] Move items through workflow: Idea ‚Üí Planning ‚Üí Ready ‚Üí In Progress ‚Üí Feedback ‚Üí Complete
- [ ] Update active/focus.md throughout session with current tasks
- [ ] Document any new items discovered during implementation

<!-- STATIC -->
### Scope/Requirement Changes Protocol
When requirements change during implementation:
- [ ] Pause development and assess impact
- [ ] Update item definition in detailed file (features/enhancements/bugs)
- [ ] Reassess complexity/priority if needed
- [ ] Update dependencies if affected
- [ ] Document change rationale in architecture.md if architectural
- [ ] Update index.md if priority shifts

<!-- STATIC -->
## Status Workflow & Definitions

- **Idea**: Rough concept, needs planning
- **Planning**: Being defined and scoped  
- **Ready**: Fully defined, ready for implementation
- **In Progress**: Currently being worked on
- **Feedback**: Implemented, needs iteration/review  
- **Complete**: Finished and verified
- **Blocked**: Cannot proceed due to dependency

<!-- STATIC -->
## Bug Priority Handling

- **Critical**: Drop everything, resolve immediately
- **High**: Resolve at next logical stopping point
- **Low**: Add to planned work

When bugs are found in "completed" features:
1. Move affected feature back to "In Progress" 
2. Add bug to releases/current/bugs.md
3. Resolve bug before continuing new work

<!-- STATIC -->
## Session Management

<!-- STATIC -->
### During Development
- Keep docs/active/focus.md updated with current work
- Update progress in releases/current/index.md in real-time
- Document decisions in docs/active/session.md
- Add new items to backlog or current release as discovered

<!-- STATIC -->
### "Wrap Session" Protocol
When user says "wrap up", "wrap session", "end session", or similar:

1. **Document Current State:**
   - [ ] Update active item status in releases/current/index.md
   - [ ] Note progress made and any incomplete work
   - [ ] Document any discoveries or decisions in session.md

2. **Clean Up Work Area:**
   - [ ] Remove debug code/console.logs  
   - [ ] Add TODO comments for incomplete work
   - [ ] Ensure code is in stable state
   - [ ] Stage/commit work if appropriate

3. **Prepare Next Session:**
   - [ ] Update active/focus.md with clear next steps
   - [ ] Update active/session.md with handoff notes
   - [ ] Note any blockers or decisions needed
   - [ ] Set clear priority for next session

4. **Archive & Organize:**
   - [ ] Move completed items to appropriate status
   - [ ] Update release progress indicators
   - [ ] Add session summary to session.md archive

**Response Format:**
"üîÑ Wrapping up session...
‚úÖ [Major accomplishments]
üìù Updated progress: [specific updates]
üêõ [Any bugs found or issues]
‚è≠Ô∏è Next session focus: [clear priority]
üìã [Any blockers or notes needed]
‚ú® Session complete!"

<!-- STATIC -->
## Implementation Standards

<!-- STATIC -->
### Pattern-First Development
- **ALWAYS analyze existing patterns before creating new ones**
- **NEVER invent new layouts when similar pages exist**
- **COPY and adapt proven structures rather than innovating**
- **MATCH component usage, styling, and patterns from reference examples**

<!-- STATIC -->
### Quality Gates
- New implementations must match existing similar implementations
- Component usage must be consistent with established patterns
- Follow docs/project/design.md and docs/project/stack.md guidelines
- Update docs/project/architecture.md when making technical decisions

<!-- STATIC -->
### External Documentation
- **Reference Context7** for current library documentation and examples
- **Check official docs** for Next.js, React, TypeScript, and chosen stack
- **Follow project docs first**, then latest external best practices
- **Maintain consistency** with established patterns in docs/project/stack.md

<!-- DYNAMIC: [Project-specific context will be added during generation] -->
<!-- DYNAMIC: [Technology stack and specific guidelines] -->
<!-- DYNAMIC: [Project name and domain context] -->

---

<!-- STATIC -->
*This workflow ensures consistent development practices, clear progress tracking, and seamless handoffs between sessions and AI assistants. The docs/releases/current/index.md file is your primary reference point - always start there.*