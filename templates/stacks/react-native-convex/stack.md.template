# Technology Stack Guidelines - React Native + Convex

<!-- STATIC -->
## Overview
This project uses React Native with Expo SDK 51+ and Convex for a cross-platform mobile application with real-time backend capabilities. This document defines the technology choices, patterns, and best practices for maintaining consistency across all development work.

<!-- DYNAMIC: [Project-specific implementation notes and current version details] -->

---

<!-- STATIC -->
## Core Technologies

<!-- STATIC -->
### Mobile Framework - React Native + Expo
<!-- DYNAMIC: [Current Expo SDK version and key features being used] -->
- **Framework**: React Native with Expo SDK 51+
- **Router**: Expo Router (file-based routing)
- **Development**: Expo CLI and EAS (Expo Application Services)
- **TypeScript**: Strict mode enabled
- **Why Chosen**: Fastest way to build and deploy cross-platform mobile apps

<!-- STATIC -->
### Backend/Database - Convex
<!-- DYNAMIC: [Convex configuration and real-time features for mobile] -->
- **Version**: Latest Convex SDK for React Native
- **Key Capabilities**: Real-time database, server functions, automatic API generation
- **Authentication**: Convex Auth with mobile-optimized providers
- **Offline Support**: Built-in optimistic updates and conflict resolution
- **Why Chosen**: Excellent mobile real-time experience with offline capabilities

<!-- STATIC -->
### Authentication - Convex Auth
<!-- DYNAMIC: [Auth providers optimized for mobile] -->
- **Primary**: Convex Auth
- **Providers**: <!-- DYNAMIC: [Mobile auth providers: Apple, Google, SMS, Email, etc.] -->
- **Security**: JWT tokens with secure storage
- **Biometrics**: Touch ID / Face ID integration via Expo LocalAuthentication
- **Pattern**: Secure token storage with React Native async storage

<!-- STATIC -->
### Styling & UI - NativeWind + React Native Elements
<!-- DYNAMIC: [UI framework and styling approach] -->
- **Styling**: NativeWind (Tailwind CSS for React Native)
- **Components**: React Native Elements or NativeBase
- **Navigation**: React Navigation v7 (integrated with Expo Router)
- **Icons**: Expo Vector Icons
- **Animations**: React Native Reanimated v3

---

<!-- STATIC -->
## Development Patterns

<!-- STATIC -->
### Project Structure
<!-- DYNAMIC: [Expo app structure with Convex integration] -->

```
<!-- DYNAMIC: [Complete directory structure example] -->
app/
├── (auth)/               # Auth-related screens
│   ├── login.tsx
│   ├── register.tsx
│   └── _layout.tsx       # Auth layout
├── (tabs)/               # Tab-based navigation
│   ├── index.tsx         # Home tab
│   ├── profile.tsx       # Profile tab
│   ├── settings.tsx      # Settings tab
│   └── _layout.tsx       # Tab layout
├── modal.tsx             # Modal screens
├── +not-found.tsx        # 404 screen
├── _layout.tsx           # Root layout
└── +html.tsx             # Web support

src/
├── components/           # Reusable components
│   ├── ui/              # UI components
│   ├── forms/           # Form components
│   └── layout/          # Layout components
├── lib/                 # Utility functions
│   ├── convex.ts        # Convex client configuration
│   ├── utils.ts         # General utilities
│   ├── storage.ts       # Secure storage utilities
│   └── constants.ts     # App constants
├── hooks/               # Custom React hooks
│   ├── useAuth.ts       # Authentication hooks
│   └── useConvex.ts     # Convex data hooks
├── types/               # TypeScript type definitions
└── assets/              # Images, fonts, etc.

convex/
├── schema.ts            # Database schema
├── auth.config.ts       # Auth configuration
├── _generated/          # Auto-generated files
└── functions/           # Server functions
    ├── users.ts         # User management
    ├── auth.ts          # Auth functions
    └── [feature].ts     # Feature-specific functions
```

<!-- STATIC -->
### Code Organization Standards
<!-- DYNAMIC: [Naming conventions and import patterns for React Native + Convex] -->

**File Naming:**
- Screens: `kebab-case.tsx` (following Expo Router conventions)
- Components: `PascalCase.tsx`
- Hooks: `use-feature-name.ts`
- Utils: `kebab-case.ts`
- Types: `PascalCase.types.ts`

**Import Order:**
1. React Native imports
2. Expo imports
3. External libraries
4. Convex imports (`convex/react-native`, `convex/_generated`)
5. Internal components
6. Internal utilities and hooks
7. Types and constants

**Navigation Patterns:**
- File-based routing with Expo Router
- Typed navigation with TypeScript
- Deep linking support for all screens
- Modal and sheet presentations

<!-- STATIC -->
### Component Patterns
<!-- DYNAMIC: [React Native component patterns with Convex data fetching] -->

**Screen Components:**
```typescript
// app/(tabs)/index.tsx
import { useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";
import { View, FlatList } from "react-native";
import { PostCard } from "@/src/components/PostCard";

export default function HomeScreen() {
  const posts = useQuery(api.posts.list);
  
  if (!posts) {
    return <LoadingSpinner />;
  }
  
  return (
    <View className="flex-1 bg-white">
      <FlatList
        data={posts}
        renderItem={({ item }) => <PostCard post={item} />}
        keyExtractor={(item) => item._id}
      />
    </View>
  );
}
```

**Custom Hooks:**
```typescript
// src/hooks/useAuth.ts
import { useAuthActions } from "@convex-dev/auth/react";
import AsyncStorage from '@react-native-async-storage/async-storage';

export function useAuth() {
  const { signIn, signOut } = useAuthActions();
  
  const handleBiometricAuth = async () => {
    // Implement biometric authentication
  };
  
  return {
    signIn,
    signOut,
    handleBiometricAuth,
  };
}
```

---

<!-- STATIC -->
## Configuration & Setup

<!-- STATIC -->
### Environment Configuration
<!-- DYNAMIC: [Environment variables and mobile app configuration] -->

**Required Environment Variables:**
```bash
# Convex
EXPO_PUBLIC_CONVEX_URL=https://your-deployment.convex.cloud

# App Configuration
EXPO_PUBLIC_APP_SCHEME=your-app-scheme
EXPO_PUBLIC_APP_VERSION=1.0.0

# Authentication (if using external providers)
EXPO_PUBLIC_GOOGLE_CLIENT_ID=your-google-client-id
EXPO_PUBLIC_APPLE_CLIENT_ID=your-apple-client-id

# Push Notifications
EXPO_PUBLIC_EXPO_PROJECT_ID=your-expo-project-id
```

**App Configuration (app.json):**
```json
{
  "expo": {
    "name": "<!-- DYNAMIC: [App Name] -->",
    "slug": "<!-- DYNAMIC: [app-slug] -->",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "scheme": "your-app-scheme",
    "userInterfaceStyle": "automatic",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.yourcompany.yourapp"
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.yourcompany.yourapp"
    },
    "plugins": [
      "expo-router",
      "expo-secure-store",
      "expo-local-authentication"
    ]
  }
}
```

<!-- STATIC -->
### Development Workflow
<!-- DYNAMIC: [Development setup and mobile development commands] -->

**Development Commands:**
```bash
# Development
npx expo start              # Start Expo dev server
npx expo start --ios        # iOS simulator
npx expo start --android    # Android emulator
npx convex dev              # Convex dev environment

# Building
eas build --platform ios    # Build iOS app
eas build --platform android # Build Android app
eas build --platform all    # Build both platforms

# Deployment
eas submit --platform ios   # Submit to App Store
eas submit --platform android # Submit to Play Store
npx convex deploy           # Deploy Convex functions
```

**Development Setup:**
1. Install Expo CLI: `npm install -g @expo/cli`
2. Clone repository and install dependencies
3. Set up Convex: `npx convex dev --run setup`
4. Configure environment variables
5. Start development: `npx expo start`

<!-- STATIC -->
### Testing Strategy
<!-- DYNAMIC: [Testing frameworks and patterns for React Native + Convex] -->

**Mobile Testing:**
- **Unit Tests**: Jest + React Native Testing Library
- **Integration Tests**: Detox for E2E testing
- **Component Tests**: Storybook for React Native (optional)
- **Device Testing**: Expo Go app and physical devices

**Backend Testing:**
- **Convex Functions**: Built-in Convex testing utilities
- **Real-time Tests**: Test subscription behavior
- **Offline Tests**: Test optimistic updates and sync

**Testing on Devices:**
- **iOS**: Xcode Simulator + physical devices via TestFlight
- **Android**: Android Studio Emulator + physical devices via internal testing
- **Cross-platform**: Expo Go for rapid testing

---

<!-- STATIC -->
## Best Practices & Conventions

<!-- STATIC -->
### Code Quality
<!-- DYNAMIC: [ESLint, Prettier, and TypeScript configuration for React Native] -->

**Linting & Formatting:**
- **ESLint**: React Native recommended + Expo rules
- **Prettier**: Consistent code formatting
- **TypeScript**: Strict mode with React Native types
- **Husky**: Pre-commit hooks for quality gates

**Mobile-Specific Quality:**
- **Metro Bundle Analysis**: Monitor bundle size
- **Performance Monitoring**: Use Flipper for debugging
- **Memory Management**: Profile memory usage
- **Battery Usage**: Monitor background activity

<!-- STATIC -->
### Performance Guidelines
<!-- DYNAMIC: [React Native performance optimization with Convex] -->

**React Native Optimizations:**
- Use FlatList for large datasets with proper keyExtractor
- Implement lazy loading and pagination
- Optimize images with appropriate sizes and formats
- Use React Native's built-in performance monitoring
- Minimize bridge communications

**Convex Mobile Optimizations:**
- Design efficient subscriptions for mobile constraints
- Implement proper offline handling
- Use optimistic updates for responsive UI
- Cache frequently accessed data locally
- Handle network connectivity changes

**Mobile-Specific Considerations:**
- **Battery Life**: Minimize background processing
- **Data Usage**: Optimize for cellular connections
- **Storage**: Use efficient local storage patterns
- **Startup Time**: Lazy load heavy components

<!-- STATIC -->
### Security Considerations
<!-- DYNAMIC: [Security best practices for React Native + Convex] -->

**Mobile Security:**
- Secure token storage with Expo SecureStore
- Certificate pinning for API communications
- Code obfuscation for production builds
- Biometric authentication for sensitive actions
- Proper deep link validation

**Data Security:**
- End-to-end encryption for sensitive data
- Secure backup and restore procedures
- PII handling compliance (GDPR, CCPA)
- Regular security audits and updates
- Secure development lifecycle practices

---

<!-- STATIC -->
## External Resources

<!-- STATIC -->
### Official Documentation
<!-- DYNAMIC: [Current documentation links for all technologies] -->

**Primary Resources:**
- [Expo Documentation](https://docs.expo.dev/)
- [React Native Documentation](https://reactnative.dev/docs/getting-started)
- [Convex Documentation](https://docs.convex.dev)
- [NativeWind Documentation](https://www.nativewind.dev/)

**Integration Guides:**
- [Convex React Native Integration](https://docs.convex.dev/client/react-native)
- [Expo Router Documentation](https://expo.github.io/router/)
- [EAS Build and Submit](https://docs.expo.dev/build/introduction/)

<!-- STATIC -->
### Community Resources
<!-- DYNAMIC: [Recommended learning resources and mobile development community] -->

**Learning Resources:**
- [Expo Examples](https://github.com/expo/examples)
- [React Native Examples](https://github.com/ReactNativeNews/React-Native-Apps)
- [Convex Mobile Examples](https://github.com/get-convex/convex-examples)

**Community:**
- [Expo Discord](https://chat.expo.dev/)
- [React Native Discord](https://discord.gg/reactnative)
- [Convex Discord](https://convex.dev/community)

<!-- STATIC -->
### Updates & Migration
<!-- DYNAMIC: [Strategy for keeping mobile stack current] -->

**Update Strategy:**
- Follow Expo SDK release cycle (quarterly)
- Monitor React Native releases for performance improvements
- Update Convex SDK regularly for new features
- Test updates on multiple devices and OS versions
- Maintain backward compatibility for older app versions

**Mobile-Specific Considerations:**
- App Store review times for updates
- Breaking changes in native dependencies
- OS version compatibility matrix
- Device-specific testing requirements
- Gradual rollout strategies for major updates

---

<!-- STATIC -->
*This document should be updated when significant technology changes occur or when upgrading to new versions. Always test changes on multiple devices and OS versions before deploying to production.*